// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Selfix.Infrastructure.Database;

#nullable disable

namespace Selfix.Infrastructure.Database.Migrations
{
    [DbContext(typeof(SelfixDbContext))]
    partial class SelfixDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Selfix.Infrastructure.Database.Entities.AvatarDb", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(8192)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<string>("OSLoraFilePath")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("os_lora_file_path");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("avatars", (string)null);
                });

            modelBuilder.Entity("Selfix.Infrastructure.Database.Entities.ImageDb", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("OSFilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("os_file_path");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("Selfix.Infrastructure.Database.Entities.JobDb", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<JsonDocument>("Input")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("input");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<JsonDocument>("Output")
                        .HasColumnType("jsonb")
                        .HasColumnName("output");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("jobs", (string)null);
                });

            modelBuilder.Entity("Selfix.Infrastructure.Database.Entities.OrderDb", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<JsonDocument>("PaymentData")
                        .HasColumnType("jsonb")
                        .HasColumnName("payment_data");

                    b.Property<string>("ProductId")
                        .HasColumnType("text")
                        .HasColumnName("product_id");

                    b.Property<string>("PromocodeId")
                        .HasColumnType("text")
                        .HasColumnName("promocode_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PromocodeId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Selfix.Infrastructure.Database.Entities.PackageDb", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AvatarGenerationsCount")
                        .HasColumnType("integer")
                        .HasColumnName("avatar_generations_count");

                    b.Property<int>("ImageGenerationsCount")
                        .HasColumnType("integer")
                        .HasColumnName("image_generations_count");

                    b.HasKey("Id");

                    b.ToTable("packages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00S2G6N181WKCATSV5TQTHKPY8",
                            AvatarGenerationsCount = 1,
                            ImageGenerationsCount = 100
                        },
                        new
                        {
                            Id = "00S2G6N181WJHSBKZZ8SMSRWY4",
                            AvatarGenerationsCount = 1,
                            ImageGenerationsCount = 20
                        },
                        new
                        {
                            Id = "00S2G6N181WDQQRE4RPZEJ02Y1",
                            AvatarGenerationsCount = 0,
                            ImageGenerationsCount = 100
                        },
                        new
                        {
                            Id = "00S2G6N181WCX6781J4X8A98XX",
                            AvatarGenerationsCount = 1,
                            ImageGenerationsCount = 0
                        });
                });

            modelBuilder.Entity("Selfix.Infrastructure.Database.Entities.ProductDb", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("discount");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<string>("PackageId")
                        .HasColumnType("text")
                        .HasColumnName("package_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("PackageId")
                        .IsUnique();

                    b.ToTable("products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00S2G6N181NNBFCB3JWCK7J7BP",
                            Discount = 1000m,
                            IsActive = true,
                            Name = "Начальный пакет (1 аватар, 100 генераций)",
                            PackageId = "00S2G6N181WKCATSV5TQTHKPY8",
                            Price = 999m,
                            Type = "FirstPaymentPackage"
                        },
                        new
                        {
                            Id = "00S2G6N181NMHDV50CAJDFVDBK",
                            Discount = 1000m,
                            IsActive = true,
                            Name = "Специальное предложение (1 аватар, 20 генераций)",
                            PackageId = "00S2G6N181WJHSBKZZ8SMSRWY4",
                            Price = 399m,
                            Type = "TrialPackage"
                        },
                        new
                        {
                            Id = "00S2G6N181NKPW9Z56RM6R0KBF",
                            Discount = 1000m,
                            IsActive = true,
                            Name = "100 генераций",
                            PackageId = "00S2G6N181WDQQRE4RPZEJ02Y1",
                            Price = 999m,
                            Type = "Package"
                        },
                        new
                        {
                            Id = "00S2G6N181NJWTPSA06P0G9SBC",
                            Discount = 1000m,
                            IsActive = true,
                            Name = "1 аватар",
                            PackageId = "00S2G6N181WCX6781J4X8A98XX",
                            Price = 499m,
                            Type = "Package"
                        });
                });

            modelBuilder.Entity("Selfix.Infrastructure.Database.Entities.PromocodeDb", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("used_by_user_id");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.HasIndex("UsedByUserId");

                    b.ToTable("promocodes", (string)null);
                });

            modelBuilder.Entity("Selfix.Infrastructure.Database.Entities.PromptDb", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("NumberInOrder")
                        .HasColumnType("integer")
                        .HasColumnName("number_in_order");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("varchar(8192)")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.ToTable("prompts", (string)null);
                });

            modelBuilder.Entity("Selfix.Infrastructure.Database.Entities.TelegramProfileDb", b =>
                {
                    b.Property<long>("TelegramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TelegramId"));

                    b.Property<string>("ProfileState")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("chat_state");

                    b.Property<JsonDocument>("Settings")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("settings");

                    b.Property<JsonDocument>("StateData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("state_data");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("TelegramId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("telegram_profiles", (string)null);
                });

            modelBuilder.Entity("Selfix.Infrastructure.Database.Entities.UserDb", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ActiveAvatarId")
                        .HasColumnType("text")
                        .HasColumnName("active_avatar_id");

                    b.Property<int>("AvatarGenerationsCount")
                        .HasColumnType("integer")
                        .HasColumnName("avatar_generations_count");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("ImageGenerationsCount")
                        .HasColumnType("integer")
                        .HasColumnName("image_generations_count");

                    b.Property<string>("InvitedById")
                        .HasColumnType("text")
                        .HasColumnName("invited_by_id");

                    b.HasKey("Id");

                    b.HasIndex("ActiveAvatarId")
                        .IsUnique();

                    b.HasIndex("InvitedById");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Selfix.Infrastructure.Database.Entities.AvatarDb", b =>
                {
                    b.HasOne("Selfix.Infrastructure.Database.Entities.UserDb", "User")
                        .WithMany("Avatars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Selfix.Infrastructure.Database.Entities.ImageDb", b =>
                {
                    b.HasOne("Selfix.Infrastructure.Database.Entities.UserDb", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Selfix.Infrastructure.Database.Entities.JobDb", b =>
                {
                    b.HasOne("Selfix.Infrastructure.Database.Entities.UserDb", "User")
                        .WithMany("Jobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Selfix.Infrastructure.Database.Entities.OrderDb", b =>
                {
                    b.HasOne("Selfix.Infrastructure.Database.Entities.ProductDb", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Selfix.Infrastructure.Database.Entities.PromocodeDb", "Promocode")
                        .WithOne("Order")
                        .HasForeignKey("Selfix.Infrastructure.Database.Entities.OrderDb", "PromocodeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Selfix.Infrastructure.Database.Entities.UserDb", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Promocode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Selfix.Infrastructure.Database.Entities.ProductDb", b =>
                {
                    b.HasOne("Selfix.Infrastructure.Database.Entities.PackageDb", "Package")
                        .WithOne("Product")
                        .HasForeignKey("Selfix.Infrastructure.Database.Entities.ProductDb", "PackageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Selfix.Infrastructure.Database.Entities.PromocodeDb", b =>
                {
                    b.HasOne("Selfix.Infrastructure.Database.Entities.ProductDb", "Product")
                        .WithMany("Promocodes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Selfix.Infrastructure.Database.Entities.UserDb", "UsedByUser")
                        .WithMany("UsedPromocodes")
                        .HasForeignKey("UsedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");

                    b.Navigation("UsedByUser");
                });

            modelBuilder.Entity("Selfix.Infrastructure.Database.Entities.TelegramProfileDb", b =>
                {
                    b.HasOne("Selfix.Infrastructure.Database.Entities.UserDb", "User")
                        .WithOne("TelegramProfile")
                        .HasForeignKey("Selfix.Infrastructure.Database.Entities.TelegramProfileDb", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Selfix.Infrastructure.Database.Entities.UserDb", b =>
                {
                    b.HasOne("Selfix.Infrastructure.Database.Entities.AvatarDb", "ActiveAvatar")
                        .WithOne("ActiveForUser")
                        .HasForeignKey("Selfix.Infrastructure.Database.Entities.UserDb", "ActiveAvatarId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Selfix.Infrastructure.Database.Entities.UserDb", "InvitedBy")
                        .WithMany("InvitedUsers")
                        .HasForeignKey("InvitedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ActiveAvatar");

                    b.Navigation("InvitedBy");
                });

            modelBuilder.Entity("Selfix.Infrastructure.Database.Entities.AvatarDb", b =>
                {
                    b.Navigation("ActiveForUser");
                });

            modelBuilder.Entity("Selfix.Infrastructure.Database.Entities.PackageDb", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("Selfix.Infrastructure.Database.Entities.ProductDb", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Promocodes");
                });

            modelBuilder.Entity("Selfix.Infrastructure.Database.Entities.PromocodeDb", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("Selfix.Infrastructure.Database.Entities.UserDb", b =>
                {
                    b.Navigation("Avatars");

                    b.Navigation("Images");

                    b.Navigation("InvitedUsers");

                    b.Navigation("Jobs");

                    b.Navigation("Orders");

                    b.Navigation("TelegramProfile");

                    b.Navigation("UsedPromocodes");
                });
#pragma warning restore 612, 618
        }
    }
}
